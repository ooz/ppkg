#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import random
import requests
import sys
import time

# Configure the generator here, any property set to None will be randomized
CONFIGURATION = {
    'theme': None,
    'transition': None,
    'seed': int(time.time()),
    'pexels_api_key': os.getenv('PEXELS_API_KEY', '').strip()
}

EXTRA_STYLE = '''
<style>
.reveal .slidebackground {
  background: no-repeat center center fixed;
  background-size: cover; /* `contain` works nicely as well */
}
</style>
'''

THEMES = ['beige', 'black', 'blood', 'league', 'moon', 'night', 'serif', 'simple', 'sky', 'solarized', 'white']
TRANSITIONS = ['none', 'fade', 'slide', 'convex', 'concave', 'zoom']

def meta(title, theme=None, transition=None):
    if CONFIGURATION['theme']:
        theme = CONFIGURATION['theme']
    if CONFIGURATION['transition']:
        theme = CONFIGURATION['transition']
    if not theme:
        theme = RNG.choice(THEMES)
    if not transition:
        transition = RNG.choice(TRANSITIONS)
    return \
f'''---
title: "{title}"
separator: <!--s-->
verticalSeparator: <!--v-->
theme: {theme}
revealOptions:
    controls: true
    transition: '{transition}'
    slideNumber: 'c/t'
---
'''

def slide(content, vertical=False, last=False, background=''):
    if background:
        background = f'<!-- .slide: class="slidebackground" data-background="{background}" -->\n'
    slide_type = 'v' if vertical else 's'
    slide_type = '' if last else f'<!--{slide_type}-->'
    s = f'''{background}{content}

{slide_type}
'''
    return s.strip() + '\n'

def bullets(lines, ordered=False, fragments=False):
    list_type = '1.' if ordered else '*'
    fragment = ' <!-- .element: class="fragment" --> ' if fragments else ' '
    lines = [f'{list_type}{fragment}{line}' for line in lines]
    return '\n'.join(lines)

def intro(title, slogan=None, author_coordinates=None):
    lower_part = ''
    if slogan:
        lower_part += f'*{slogan}*'
    if author_coordinates:
        lower_part += f'\n\n{author_coordinates}'
    lower_part = lower_part.strip()
    return \
f'''# {title}

{lower_part}'''.strip()

def quote(content, author, year=''):
    if year:
        year = f', {year}'
    return f'> "{content}" - {author}{year}'

def image(url, alt=''):
    return f'![{alt}]({url})'


def generateReadmePresentation():
    title = 'Pompous Presentation Karaoke Generator'
    slogan = 'Lost your slide deck? Luckily you found PPKG!'
    meta_block = meta(title, 'white', 'slide')
    slides = [
        slide(intro(title, slogan)),
        slide('''## Inspiration

* [SCIgen](https://pdos.csail.mit.edu/archive/scigen/)
* [Chicken Chicken Chicken](https://www.slideshare.net/dakami/chicken-59851061)

PPKG is a "PowerPoint Karaoke" generator composing slide decks from up to three passed topics.'''),
        slide(f'''## Features

PPKG generates slide decks with 10-20 slides (can be configured in the script). Possible slide types generated:

{bullets(['Title slide', 'Motivation/key-argument slide (few words, maybe big background image?)', 'Agenda slide', 'Slide with lists and bullet points', 'Slide with lots of text', 'Slide with some chart, references, literature, links'])}'''),
        slide(f'''## Installation

{bullets(['Make sure you have Python 3 installed', 'Copy `ppkg` script to the directory you want to generate your slides in or', 'Put `ppkg` script on your PATH', 'Make sure the script is executable'], True)}

```
chmod +x ppkg
```'''),
        slide('''## Usage

```bash
# Generate this README
ppkg ppkg ppkg > README.md

# To generate a "chicken chicken chicken" slide deck, use the same topic three times
ppkg bananas bananas bananas > slides.md

# Generate a slide deck about max. 3 topics
ppkg mango universe study > slides.md
```

* ppkg then generates Markdown files (`*.md`) to be presented using [`reveal-md`](https://github.com/webpro/reveal-md)

```bash
# Use reveal-md to run your presentation
reveal-md generated-slides.md
# Or use the provided Makefile and Docker
make dockerRun
```'''),
        slide('''## [Diversifiers](https://globalgamejam.org/news/ggj-online-diversifiers)

* **Destination: Happy Place**: the entire point of PPK is to have lots of laughs!
* **Kitchen sink**: play with keyboard, mouse, controller, or any other presenting device!
* **RNG**: entire content and texts are randomized!
* **Murphy's Law**: that's the fun of PPK!''', True),
        slide('''* **Fake News**: the generated presentations are fake, disinformation and full of bullshit!
* **On the safe side**: made Corona-safe, alone!
* **A-Party**: yes, you can have a PPK during a video call!
* **Next Slide Please**: the game is a presentation!''', False, True)
    ]
    slides = '\n'.join(slides)
    return meta_block + '\n' + slides

def generateChickenChickenChicken(topic):
    title = [topic] * 3
    title = ' '.join(title)
    meta_block = meta(title)
    images = get_image_urls_for_topic(topic)
    slides = [
        slide(intro(title)),
        slide(quote(topic + '!', topic), False, False, RNG.image(images)),
        slide(bullets([topic] * 5, True, True)),
        slide(' '.join([topic] * 42)),
        slide(image(RNG.piechart([topic] * 3))),
        slide(f'## {topic}\n\n' + bullets([topic] * 3)),
        slide(f'## {topic}?', False, True, RNG.image(images))
    ]
    slides = '\n'.join(slides)
    return meta_block + '\n' + slides

def generatePresentation(topics):
    return ''

def get_image_urls_for_topic(topic):
    if CONFIGURATION['pexels_api_key']:
        headers = {'Authorization': CONFIGURATION['pexels_api_key']}
        response = requests.get(f'https://api.pexels.com/v1/search?query={topic}', headers=headers)
        json = response.json()
        return [photo['src']['large'] for photo in json['photos']]
    return []

class Rng(object):
    def __init__(self, seed):
        super().__init__()
        print(f'Seed: {seed}', file=sys.stderr)
        self.values = range(1000)
        self.rng = random.Random(seed)
        self.values = [self.rng.random() for _ in self.values]
        self.values = iter(self.values)

    def choice(self, seq):
        random_index = int(next(self.values) * len(seq))
        return seq[random_index]

    def image(self, images):
        if images:
            return self.choice(images)
        return ''

    def piechart(self, topics):
        values = [str(int(self.random() * 1000)) for _ in topics]
        values = ','.join(values)
        labels = '|'.join(topics)
        return f'''https://chart.googleapis.com/chart?cht=p3&chs=600x250&chd=t:{values}&chds=a&chl={labels}'''

    def random(self):
        value = next(self.values)
        return value

RNG = Rng(CONFIGURATION['seed'])

def main(args):
    if len(args) < 1 or len(args) > 3:
        print("Error: Please pass at least one topic and at most 3 topics separated by space!")
        sys.exit(1)

    markdown = ''
    if args == ['ppkg', 'ppkg']:
        markdown = generateReadmePresentation()
    elif len(args) == 3 and args[0] == args[1] and args[1] == args[2]:
        markdown = generateChickenChickenChicken(args[0])
    else:
        markdown = generatePresentation(args)

    if markdown and EXTRA_STYLE:
        markdown += EXTRA_STYLE
    if markdown:
        print(markdown)

if __name__ == "__main__":
    main(sys.argv[1:])
